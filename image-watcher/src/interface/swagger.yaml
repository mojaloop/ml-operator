openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/lewisdaly/test/1.0.0
info:
  description: Image-Watcher (name TBD) is a standalone service which watches docker hub for image updates and caches them periodically. Other services can query image watcher to ask of there is a newer version for a given image, based on a provided upgrade strategy
  version: "0.1.0"
  title: ml-image-watcher api
  contact:
    email: lewisd@crosslaketech.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

paths:
  /images/{org}/{image}/{tag}:
    get:
      tags:
        - images
      operationId: ImageGet
      summary: ImageGet
      description: Get a new version of the image based on the current and an upgrade strategy
      parameters:
        - name: org
          in: path
          required: true
          schema:
            type: string
          description: The organization of the image - e.g. `mojaloop`
          example: mojaloop
        - name: image
          in: path
          required: true
          schema:
            type: string
          description: The image name - e.g. `central-ledger`
          example: central-ledger
        - name: tag
          in: path
          required: true
          schema:
            type: string
          description: The current tag of the image
          example: "v11.0.0"
        - name: strategy
          in: query
          schema:
            type: string
            enum: [patch, bugfix, minor, major]
          description: The upgrade strategy to apply. If not set, will use the `patch` strategy
        
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResult'

  /health:
    get:
      tags:
        - health
      responses:
        '200':
          $ref: '#/paths/~1hello/get/responses/200'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
      operationId: HealthGet
      summary: Get Server
      description: The HTTP request GET /health is used to return the current status of the API.
  /metrics:
    get:
      tags:
        - metrics
      responses:
        '200':
          $ref: '#/paths/~1hello/get/responses/200'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
      operationId: MetricsGet
      summary: Prometheus metrics endpoint
      description: The HTTP request GET /metrics is used to return metrics for the API.
  /hello:
    get:
      tags:
        - metrics
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
                properties:
                  errorInformation:
                    title: ErrorInformation
                    type: object
                    description: Data model for the complex type ErrorInformation.
                    properties:
                      errorCode:
                        title: ErrorCode
                        type: string
                        pattern: '^[1-9]\d{3}$'
                        description: |
                          The API data type ErrorCode is a JSON String of four characters,
                          consisting of digits only. Negative numbers are not allowed.
                          A leading zero is not allowed. Each error code in the API is a
                          four-digit number, for example, 1234, where the first number
                          (1 in the example) represents the high-level error category,
                          the second number (2 in the example) represents the low-level error category,
                          and the last two numbers (34 in the example) represent the specific error.
                        example: 5100
                      errorDescription:
                        title: ErrorDescription
                        type: string
                        minLength: 1
                        maxLength: 128
                        description: Error description string.
                        example: This is an error description.
                      extensionList:
                        title: ExtensionList
                        type: object
                        description: |
                          Data model for the complex type ExtensionList.
                          An optional list of extensions, specific to deployment.
                        properties:
                          extension:
                            type: array
                            items:
                              title: Extension
                              type: object
                              description: Data model for the complex type Extension.
                              properties:
                                key:
                                  title: ExtensionKey
                                  type: string
                                  minLength: 1
                                  maxLength: 32
                                  description: Extension key.
                                value:
                                  title: ExtensionValue
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  description: Extension value.
                              required:
                                - key
                                - value
                            minItems: 1
                            maxItems: 16
                            description: Number of Extension elements.
                        required:
                          - extension
                    required:
                      - errorCode
                      - errorDescription
          headers:
            Content-Length:
              required: false
              schema:
                type: integer
              description: |
                The `Content-Length` header field indicates the anticipated
                size of the payload body. Only sent if there is a body.
                **Note:** The API supports a maximum size of 5242880 bytes
                (5 Megabytes).
            Content-Type:
              schema:
                type: string
              required: true
              description: The `Content-Type` header indicates the specific version of the API used to send the payload body.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '501':
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
      operationId: HelloGet
      summary: example get
      description: The HTTP request GET /hello is used to return some example json.

  
components:
  schemas:
    ImageResult:
      type: object
      required:
        - tag
        - fullImage
      properties:
        tag:
          type: string
          example: "v11.0.0-patch.1"
        fullImage:
          type: string
          example: "mojaloop/central-ledger/v11.0.0-patch.1"
      example:
        tag: "v11.0.0-patch.1"
        fullImage: "mojaloop/central-ledger/v11.0.0-patch.1"
  